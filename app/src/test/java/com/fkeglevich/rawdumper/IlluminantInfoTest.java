/*
 * Copyright 2018, Fl√°vio Keglevich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.fkeglevich.rawdumper;

import com.fkeglevich.rawdumper.raw.color.ColorTemperature;
import com.fkeglevich.rawdumper.raw.gain.GainMap;
import com.fkeglevich.rawdumper.raw.info.IlluminantInfo;
import com.fkeglevich.rawdumper.raw.mkn.illuminant.MknIlluminant;
import com.squareup.moshi.Moshi;

import junit.framework.Assert;

import org.junit.Test;

import java.util.EnumMap;
import java.util.Map;

public class IlluminantInfoTest
{
    private static class Hum
    {
        private Map<MknIlluminant, IlluminantInfo> illuminants;
    }

    @Test
    public void logIlluminantInfoJSON()
    {
        ColorTemperature temperature = new ColorTemperature(2856, 0);
        GainMap gainMap = new GainMap(2, 3);
        IlluminantInfo illuminantInfo = new IlluminantInfo(temperature, gainMap);

        Hum hum = new Hum();
        hum.illuminants = new EnumMap<>(MknIlluminant.class);

        hum.illuminants.put(MknIlluminant.A, illuminantInfo);
        hum.illuminants.put(MknIlluminant.CW, illuminantInfo);

        Moshi moshi = new Moshi.Builder().build();
        System.out.println(moshi.adapter(Hum.class).indent("    ").toJson(hum));


        /*

         */

        //Log.i("ASD", moshi.adapter(IlluminantInfo.class).indent("    ").toJson(illuminantInfo));
    }

    @Test
    public void stringToFloatArrayTest()
    {
        String numbers = "3.58 3.29 3.00 2.77 2.55 2.36 2.23 2.12 2.06 1.99 1.94 1.88 1.89 1.87 1.89 1.95 2.03 2.09 2.20 2.32 2.50 2.62 2.96 3.30 3.65 3.92 4.16 \n" +
                "3.48 3.08 2.77 2.56 2.38 2.24 2.09 1.98 1.91 1.84 1.76 1.75 1.74 1.74 1.76 1.80 1.84 1.95 2.03 2.16 2.29 2.48 2.76 3.04 3.40 3.81 4.16 \n" +
                "3.21 2.84 2.58 2.39 2.23 2.08 1.95 1.83 1.75 1.69 1.64 1.59 1.58 1.58 1.60 1.65 1.70 1.77 1.86 1.99 2.13 2.32 2.56 2.82 3.18 3.59 3.97 \n" +
                "2.92 2.64 2.44 2.25 2.10 1.98 1.83 1.73 1.62 1.54 1.49 1.46 1.44 1.44 1.46 1.51 1.57 1.64 1.74 1.86 1.99 2.17 2.38 2.64 2.95 3.36 3.78 \n" +
                "2.76 2.53 2.31 2.12 1.96 1.82 1.73 1.61 1.52 1.44 1.39 1.34 1.34 1.32 1.35 1.38 1.44 1.52 1.61 1.73 1.88 2.05 2.29 2.52 2.80 3.14 3.59 \n" +
                "2.60 2.41 2.20 2.02 1.88 1.74 1.63 1.52 1.42 1.34 1.29 1.24 1.23 1.22 1.25 1.28 1.33 1.41 1.51 1.63 1.78 1.94 2.15 2.38 2.63 3.00 3.42 \n" +
                "2.51 2.31 2.11 1.96 1.80 1.67 1.55 1.43 1.34 1.26 1.21 1.16 1.15 1.14 1.16 1.19 1.25 1.32 1.42 1.56 1.70 1.88 2.04 2.28 2.55 2.88 3.26 \n" +
                "2.51 2.24 2.05 1.89 1.76 1.62 1.50 1.38 1.28 1.20 1.14 1.11 1.09 1.08 1.10 1.13 1.19 1.26 1.35 1.48 1.62 1.79 1.98 2.20 2.48 2.80 3.20 \n" +
                "2.41 2.20 2.00 1.84 1.72 1.57 1.44 1.34 1.24 1.15 1.10 1.06 1.04 1.03 1.05 1.08 1.13 1.21 1.30 1.42 1.57 1.74 1.93 2.15 2.44 2.75 3.10 \n" +
                "2.37 2.16 1.98 1.81 1.69 1.55 1.42 1.31 1.20 1.12 1.07 1.03 1.01 1.01 1.03 1.05 1.11 1.18 1.27 1.40 1.54 1.69 1.88 2.12 2.39 2.70 3.03 \n" +
                "2.37 2.15 1.96 1.80 1.65 1.51 1.38 1.28 1.19 1.11 1.06 1.03 1.00 1.00 1.02 1.04 1.10 1.16 1.26 1.38 1.51 1.68 1.88 2.10 2.36 2.71 3.07 \n" +
                "2.37 2.14 1.97 1.81 1.67 1.53 1.40 1.29 1.20 1.12 1.06 1.03 1.00 1.01 1.02 1.05 1.10 1.17 1.26 1.38 1.52 1.69 1.89 2.11 2.35 2.67 3.03 \n" +
                "2.39 2.18 1.99 1.83 1.67 1.53 1.42 1.30 1.21 1.14 1.09 1.05 1.03 1.03 1.04 1.07 1.12 1.20 1.29 1.41 1.54 1.72 1.93 2.13 2.40 2.68 3.06 \n" +
                "2.41 2.20 2.02 1.87 1.71 1.58 1.46 1.35 1.26 1.18 1.12 1.08 1.07 1.07 1.08 1.11 1.17 1.24 1.33 1.46 1.60 1.76 1.95 2.18 2.44 2.74 3.16 \n" +
                "2.50 2.28 2.06 1.90 1.75 1.64 1.51 1.40 1.31 1.23 1.18 1.13 1.12 1.12 1.13 1.17 1.23 1.30 1.40 1.52 1.66 1.85 2.02 2.27 2.52 2.83 3.21 \n" +
                "2.60 2.37 2.14 1.98 1.82 1.70 1.58 1.48 1.38 1.30 1.25 1.21 1.19 1.19 1.21 1.24 1.30 1.37 1.47 1.59 1.75 1.94 2.13 2.35 2.63 2.95 3.39 \n" +
                "2.75 2.48 2.24 2.06 1.91 1.78 1.68 1.56 1.47 1.39 1.33 1.31 1.28 1.28 1.30 1.34 1.39 1.46 1.58 1.69 1.84 2.02 2.23 2.46 2.77 3.12 3.48 \n" +
                "2.89 2.59 2.37 2.18 2.03 1.89 1.76 1.66 1.58 1.49 1.45 1.41 1.38 1.39 1.41 1.44 1.50 1.58 1.70 1.82 2.00 2.15 2.36 2.59 2.91 3.29 3.63 \n" +
                "3.09 2.74 2.50 2.31 2.15 2.01 1.88 1.79 1.69 1.62 1.56 1.52 1.51 1.51 1.53 1.58 1.65 1.73 1.85 1.98 2.11 2.30 2.53 2.80 3.10 3.46 3.81 \n" +
                "3.26 2.93 2.68 2.48 2.29 2.21 2.03 1.91 1.82 1.78 1.69 1.68 1.65 1.66 1.68 1.73 1.80 1.90 2.00 2.15 2.31 2.47 2.74 2.97 3.35 3.70 4.01 \n" +
                "3.53 3.21 2.89 2.64 2.53 2.28 2.23 2.10 1.99 1.93 1.86 1.84 1.82 1.85 1.85 1.91 2.00 2.06 2.22 2.32 2.51 2.74 2.93 3.31 3.58 3.86 3.94";

        String withoutNLs = numbers.replace("\n", "").trim();
        String withCommas = withoutNLs.replace(" ", ",");
        System.out.println(withCommas);
        //String[] split = withoutNLs.split(" ");
        //Assert.assertEquals(21*27, split.length);
    }

    @Test
    public void formatStringToJSON()
    {
        String numbers = "4.51 4.30 3.81 3.38 3.22 2.90 2.71 2.60 2.44 2.37 2.28 2.21 2.22 2.28 2.26 2.32 2.46 2.59 2.78 2.94 3.24 3.42 3.76 4.33 4.69 5.05 5.24 \n" +
                "4.37 3.83 3.45 3.23 2.98 2.77 2.57 2.35 2.22 2.11 2.03 2.00 1.98 2.00 2.02 2.12 2.19 2.33 2.47 2.71 2.91 3.21 3.51 3.97 4.44 4.91 5.19 \n" +
                "3.92 3.54 3.24 2.98 2.74 2.53 2.30 2.12 1.99 1.89 1.82 1.78 1.75 1.78 1.78 1.84 1.95 2.07 2.23 2.47 2.69 2.98 3.33 3.69 4.14 4.66 5.21 \n" +
                "3.71 3.32 3.06 2.82 2.55 2.32 2.11 1.95 1.82 1.71 1.62 1.59 1.56 1.54 1.59 1.68 1.76 1.88 2.03 2.23 2.46 2.78 3.07 3.49 3.87 4.45 4.98 \n" +
                "3.52 3.14 2.85 2.59 2.35 2.13 1.96 1.78 1.64 1.54 1.47 1.41 1.40 1.40 1.42 1.50 1.58 1.70 1.85 2.04 2.28 2.56 2.89 3.23 3.64 4.16 4.74 \n" +
                "3.42 3.02 2.72 2.46 2.18 1.97 1.78 1.65 1.50 1.39 1.32 1.29 1.27 1.27 1.30 1.35 1.42 1.55 1.72 1.92 2.11 2.39 2.69 3.07 3.46 3.90 4.58 \n" +
                "3.24 2.91 2.60 2.32 2.08 1.87 1.67 1.52 1.39 1.30 1.24 1.19 1.17 1.17 1.21 1.26 1.33 1.45 1.59 1.77 1.99 2.26 2.56 2.93 3.35 3.79 4.44 \n" +
                "3.13 2.80 2.47 2.21 2.00 1.80 1.59 1.44 1.31 1.22 1.15 1.12 1.10 1.10 1.12 1.17 1.25 1.36 1.49 1.67 1.88 2.14 2.45 2.81 3.25 3.70 4.28 \n" +
                "3.07 2.74 2.44 2.16 1.92 1.71 1.52 1.37 1.25 1.16 1.10 1.07 1.04 1.05 1.07 1.11 1.19 1.28 1.43 1.61 1.82 2.06 2.36 2.75 3.18 3.62 4.18 \n" +
                "3.01 2.68 2.41 2.11 1.87 1.68 1.49 1.34 1.22 1.12 1.08 1.03 1.01 1.01 1.04 1.08 1.15 1.26 1.38 1.56 1.77 2.01 2.32 2.67 3.13 3.60 4.04 \n" +
                "3.00 2.67 2.39 2.08 1.86 1.63 1.45 1.31 1.20 1.12 1.06 1.03 1.00 1.01 1.03 1.08 1.15 1.25 1.37 1.55 1.75 2.00 2.31 2.63 3.08 3.58 4.06 \n" +
                "3.04 2.67 2.39 2.11 1.85 1.66 1.47 1.33 1.21 1.12 1.07 1.02 1.01 1.02 1.04 1.08 1.16 1.26 1.38 1.55 1.76 2.00 2.34 2.67 3.08 3.57 4.01 \n" +
                "3.07 2.73 2.41 2.14 1.88 1.68 1.51 1.36 1.24 1.15 1.10 1.05 1.04 1.04 1.07 1.11 1.19 1.29 1.43 1.59 1.78 2.05 2.37 2.72 3.14 3.58 4.08 \n" +
                "3.06 2.77 2.48 2.20 1.94 1.75 1.56 1.41 1.30 1.20 1.14 1.11 1.08 1.10 1.12 1.17 1.25 1.35 1.49 1.67 1.88 2.13 2.45 2.77 3.25 3.67 4.17 \n" +
                "3.23 2.85 2.56 2.28 2.04 1.82 1.65 1.50 1.37 1.28 1.22 1.17 1.16 1.16 1.19 1.25 1.33 1.43 1.58 1.77 1.98 2.29 2.54 2.92 3.32 3.76 4.34 \n" +
                "3.30 2.97 2.68 2.39 2.16 1.94 1.77 1.61 1.48 1.39 1.31 1.28 1.25 1.26 1.29 1.34 1.42 1.55 1.67 1.88 2.12 2.40 2.73 3.07 3.49 3.92 4.53 \n" +
                "3.54 3.19 2.83 2.56 2.29 2.07 1.92 1.73 1.60 1.50 1.42 1.39 1.38 1.37 1.41 1.47 1.57 1.68 1.84 2.05 2.28 2.54 2.88 3.23 3.67 4.08 4.66 \n" +
                "3.69 3.31 3.01 2.72 2.46 2.24 2.06 1.90 1.76 1.65 1.60 1.54 1.52 1.53 1.56 1.64 1.72 1.86 2.03 2.24 2.48 2.78 3.10 3.47 3.83 4.37 5.10 \n" +
                "3.92 3.48 3.19 2.88 2.65 2.43 2.24 2.10 1.95 1.86 1.77 1.71 1.70 1.71 1.76 1.81 1.94 2.08 2.28 2.49 2.75 3.02 3.38 3.66 4.19 4.70 5.07 \n" +
                "4.22 3.76 3.39 3.17 2.88 2.67 2.51 2.32 2.18 2.08 2.00 1.92 1.95 1.92 1.99 2.08 2.16 2.34 2.52 2.74 2.98 3.31 3.62 3.99 4.41 4.95 5.36 \n" +
                "4.54 4.05 3.77 3.35 3.11 2.88 2.71 2.57 2.46 2.33 2.26 2.28 2.21 2.21 2.25 2.33 2.47 2.59 2.80 3.10 3.32 3.59 4.00 4.36 4.71 5.04 5.10 ";

        String withCommas = numbers.trim().replace(" ", ",");
        System.out.println(withCommas);
    }
}
